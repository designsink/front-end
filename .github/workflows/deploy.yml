name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Next.js project
      run: npm run build
      
    - name: Build Docker image
      run: |
        docker build -t dsink-front:latest .
        docker save dsink-front:latest > dsink-front.tar
        
    - name: Copy Docker image to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "dsink-front.tar"
        target: "/tmp/"
        
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Docker 이미지 로드
          docker load < /tmp/dsink-front.tar
          
          # 기존 컨테이너 중지 및 제거
          docker stop dsink-front || true
          docker rm dsink-front || true
          
          # 새 컨테이너 실행
          docker run -d \
            --name dsink-front \
            --network dsink \
            -p 80:80 \
            -p 443:443 \
            -v ~/app/uploads:/app/uploads \
            -v /etc/nginx-docker/nginx.conf:/etc/nginx/nginx.conf:ro \
            -v /etc/letsencrypt:/etc/letsencrypt:ro \
            -v /var/log/nginx-docker:/var/log/nginx \
            --restart unless-stopped \
            dsink-front:latest
          
          # 임시 파일 정리
          rm -f /tmp/nextjs-app.tar
          rm -f /tmp/dsink-front.tar
          
          # 오래된 이미지 정리
          docker image prune -f
